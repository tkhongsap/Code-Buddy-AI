 // Learning progress endpoint
  app.get("/api/learning-progress", async (req, res) => {
    // Check both Passport and custom session authentication
    const isAuthenticated =
      req.isAuthenticated() || (req.session && (req.session as any).userId);
    if (!isAuthenticated) return res.sendStatus(401);

    try {
      // Get userId from either Passport or custom session
      const userId = req.isAuthenticated()
        ? (req.user as any).id
        : (req.session as any).userId;

      // Get existing skill data for the user
      const userSkills = await storage.getUserSkills(userId);
      
      // Helper function to normalize progress value to 0-100
      const normalizeProgress = (value: number): number => {
        return Math.min(100, Math.max(0, value));
      };
      
      // Calculate overall completion based on skill progress
      let completion = 0;
      if (userSkills.length > 0) {
        // Normalize each skill progress value before calculating the average
        const normalizedSkills = userSkills.map(skill => ({
          ...skill,
          progress: normalizeProgress(skill.progress)
        }));
        
        const totalProgress = normalizedSkills.reduce((sum, skill) => sum + skill.progress, 0);
        completion = Math.round(totalProgress / normalizedSkills.length);
      } else {
        // Default value if no skills exist yet
        completion = 45;
      }

      // Get course progress data (to be implemented later)
      // For now, generate some basic stats
      const seed = userId * 7; // Use userId to seed our "random" numbers
      
      const learningData = {
        overallProgress: {
          completion: completion,
          coursesCompleted: (seed % 5) + 2, // Between 2-7
          activeCourses: (seed % 3) + 1, // Between 1-4
          practiceHours: (seed % 40) + 10, // Between 10-50
          streakDays: (seed % 14) + 1, // Between 1-15
        },
        skills: userSkills.map(skill => ({
          name: skill.skillName,
          progress: normalizeProgress(skill.progress),
          level: getSkillLevel(normalizeProgress(skill.progress)),
          lastUpdated: skill.lastUpdated
        }))
      };

      res.json(learningData);
    } catch (error) {
      console.error("Error fetching learning progress data:", error);
      res.status(500).json({ error: "Failed to fetch learning progress data" });
    }
  });